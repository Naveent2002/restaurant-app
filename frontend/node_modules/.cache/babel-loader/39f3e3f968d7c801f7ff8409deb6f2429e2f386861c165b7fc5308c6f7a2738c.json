{"ast":null,"code":"// Menu Actions\nexport const fetchMenu = () => async dispatch => {\n  dispatch({\n    type: 'FETCH_MENU_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/menu');\n    if (!response.ok) {\n      throw new Error('Failed to fetch menu');\n    }\n    const data = await response.json();\n    dispatch({\n      type: 'FETCH_MENU_SUCCESS',\n      payload: data\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_MENU_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\n\n// Add a new menu item\nexport const addMenuItem = item => async dispatch => {\n  dispatch({\n    type: 'ADD_MENU_ITEM_REQUEST'\n  });\n  try {\n    const formData = new FormData();\n    formData.append('name', item.name);\n    formData.append('description', item.description);\n    formData.append('price', item.price);\n    formData.append('image', item.image);\n    const response = await fetch('http://localhost:5000/api/menu/add', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add menu item');\n    }\n    const data = await response.json();\n    dispatch({\n      type: 'ADD_MENU_ITEM_SUCCESS',\n      payload: data\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'ADD_MENU_ITEM_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\n\n// Cart Actions\nexport const addToCart = item => ({\n  type: 'ADD_TO_CART',\n  payload: item\n});\nexport const removeFromCart = itemId => ({\n  type: 'REMOVE_FROM_CART',\n  payload: itemId\n});\nexport const updateCartItemQuantity = (itemId, quantity) => ({\n  type: 'UPDATE_CART_ITEM_QUANTITY',\n  payload: {\n    itemId,\n    quantity\n  }\n});\nexport const clearCart = () => ({\n  type: 'CLEAR_CART'\n});\n\n// Order Actions\nexport const placeOrder = orderData => async dispatch => {\n  dispatch({\n    type: 'PLACE_ORDER_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(orderData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to place order');\n    }\n    const data = await response.json();\n    dispatch({\n      type: 'PLACE_ORDER_SUCCESS',\n      payload: data\n    });\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'PLACE_ORDER_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const fetchOrders = () => async dispatch => {\n  dispatch({\n    type: 'FETCH_ORDERS_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/orders');\n    if (!response.ok) {\n      throw new Error('Failed to fetch orders');\n    }\n    const data = await response.json();\n    dispatch({\n      type: 'FETCH_ORDERS_SUCCESS',\n      payload: data\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_ORDERS_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const updateOrderStatus = (orderId, status) => async dispatch => {\n  dispatch({\n    type: 'UPDATE_ORDER_STATUS_REQUEST'\n  });\n  try {\n    const response = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update order status');\n    }\n    const data = await response.json();\n    dispatch({\n      type: 'UPDATE_ORDER_STATUS_SUCCESS',\n      payload: data\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'UPDATE_ORDER_STATUS_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchMenu","dispatch","type","response","fetch","ok","Error","data","json","payload","error","message","addMenuItem","item","formData","FormData","append","name","description","price","image","method","body","addToCart","removeFromCart","itemId","updateCartItemQuantity","quantity","clearCart","placeOrder","orderData","headers","JSON","stringify","fetchOrders","updateOrderStatus","orderId","status","errorData"],"sources":["C:/Users/Admin/restaurant-order-system/frontend/src/redux/actions.js"],"sourcesContent":["// Menu Actions\r\nexport const fetchMenu = () => async (dispatch) => {\r\n  dispatch({ type: 'FETCH_MENU_REQUEST' });\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/menu');\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch menu');\r\n    }\r\n    const data = await response.json();\r\n    dispatch({ type: 'FETCH_MENU_SUCCESS', payload: data });\r\n    return data;\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_MENU_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a new menu item\r\nexport const addMenuItem = (item) => async (dispatch) => {\r\n  dispatch({ type: 'ADD_MENU_ITEM_REQUEST' });\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('name', item.name);\r\n    formData.append('description', item.description);\r\n    formData.append('price', item.price);\r\n    formData.append('image', item.image);\r\n\r\n    const response = await fetch('http://localhost:5000/api/menu/add', {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to add menu item');\r\n    }\r\n\r\n    const data = await response.json();\r\n    dispatch({ type: 'ADD_MENU_ITEM_SUCCESS', payload: data });\r\n    return data;\r\n  } catch (error) {\r\n    dispatch({ type: 'ADD_MENU_ITEM_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cart Actions\r\nexport const addToCart = (item) => ({\r\n  type: 'ADD_TO_CART',\r\n  payload: item,\r\n});\r\n\r\nexport const removeFromCart = (itemId) => ({\r\n  type: 'REMOVE_FROM_CART',\r\n  payload: itemId,\r\n});\r\n\r\nexport const updateCartItemQuantity = (itemId, quantity) => ({\r\n  type: 'UPDATE_CART_ITEM_QUANTITY',\r\n  payload: { itemId, quantity },\r\n});\r\n\r\nexport const clearCart = () => ({\r\n  type: 'CLEAR_CART',\r\n});\r\n\r\n// Order Actions\r\nexport const placeOrder = (orderData) => async (dispatch) => {\r\n  dispatch({ type: 'PLACE_ORDER_REQUEST' });\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/orders', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(orderData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to place order');\r\n    }\r\n\r\n    const data = await response.json();\r\n    dispatch({ type: 'PLACE_ORDER_SUCCESS', payload: data });\r\n    dispatch({ type: 'CLEAR_CART' });\r\n    return data;\r\n  } catch (error) {\r\n    dispatch({ type: 'PLACE_ORDER_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchOrders = () => async (dispatch) => {\r\n  dispatch({ type: 'FETCH_ORDERS_REQUEST' });\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/orders');\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch orders');\r\n    }\r\n\r\n    const data = await response.json();\r\n    dispatch({ type: 'FETCH_ORDERS_SUCCESS', payload: data });\r\n    return data;\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_ORDERS_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\r\n  dispatch({ type: 'UPDATE_ORDER_STATUS_REQUEST' });\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ status }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update order status');\r\n    }\r\n\r\n    const data = await response.json();\r\n    dispatch({ type: 'UPDATE_ORDER_STATUS_SUCCESS', payload: data });\r\n    return data;\r\n  } catch (error) {\r\n    dispatch({ type: 'UPDATE_ORDER_STATUS_FAILURE', payload: error.message });\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACjDA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAqB,CAAC,CAAC;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;IAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCP,QAAQ,CAAC;MAAEC,IAAI,EAAE,oBAAoB;MAAEO,OAAO,EAAEF;IAAK,CAAC,CAAC;IACvD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,QAAQ,CAAC;MAAEC,IAAI,EAAE,oBAAoB;MAAEO,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IAChE,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIC,IAAI,IAAK,MAAOZ,QAAQ,IAAK;EACvDA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAwB,CAAC,CAAC;EAC3C,IAAI;IACF,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAACI,IAAI,CAAC;IAClCH,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,IAAI,CAACK,WAAW,CAAC;IAChDJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAACM,KAAK,CAAC;IACpCL,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAACO,KAAK,CAAC;IAEpC,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEiB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAER;IACR,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCP,QAAQ,CAAC;MAAEC,IAAI,EAAE,uBAAuB;MAAEO,OAAO,EAAEF;IAAK,CAAC,CAAC;IAC1D,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,QAAQ,CAAC;MAAEC,IAAI,EAAE,uBAAuB;MAAEO,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IACnE,MAAMD,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,SAAS,GAAIV,IAAI,KAAM;EAClCX,IAAI,EAAE,aAAa;EACnBO,OAAO,EAAEI;AACX,CAAC,CAAC;AAEF,OAAO,MAAMW,cAAc,GAAIC,MAAM,KAAM;EACzCvB,IAAI,EAAE,kBAAkB;EACxBO,OAAO,EAAEgB;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,sBAAsB,GAAGA,CAACD,MAAM,EAAEE,QAAQ,MAAM;EAC3DzB,IAAI,EAAE,2BAA2B;EACjCO,OAAO,EAAE;IAAEgB,MAAM;IAAEE;EAAS;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGA,CAAA,MAAO;EAC9B1B,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM2B,UAAU,GAAIC,SAAS,IAAK,MAAO7B,QAAQ,IAAK;EAC3DA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAsB,CAAC,CAAC;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DiB,MAAM,EAAE,MAAM;MACdU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDT,IAAI,EAAEU,IAAI,CAACC,SAAS,CAACH,SAAS;IAChC,CAAC,CAAC;IAEF,IAAI,CAAC3B,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCP,QAAQ,CAAC;MAAEC,IAAI,EAAE,qBAAqB;MAAEO,OAAO,EAAEF;IAAK,CAAC,CAAC;IACxDN,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAC;IAChC,OAAOK,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,QAAQ,CAAC;MAAEC,IAAI,EAAE,qBAAqB;MAAEO,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IACjE,MAAMD,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMwB,WAAW,GAAGA,CAAA,KAAM,MAAOjC,QAAQ,IAAK;EACnDA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAAuB,CAAC,CAAC;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;IAEhE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCP,QAAQ,CAAC;MAAEC,IAAI,EAAE,sBAAsB;MAAEO,OAAO,EAAEF;IAAK,CAAC,CAAC;IACzD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,QAAQ,CAAC;MAAEC,IAAI,EAAE,sBAAsB;MAAEO,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IAClE,MAAMD,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMyB,iBAAiB,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAK,MAAOpC,QAAQ,IAAK;EACxEA,QAAQ,CAAC;IAAEC,IAAI,EAAE;EAA8B,CAAC,CAAC;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmCgC,OAAQ,EAAC,EAAE;MAC1Ef,MAAM,EAAE,OAAO;MACfU,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDT,IAAI,EAAEU,IAAI,CAACC,SAAS,CAAC;QAAEI;MAAO,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI,CAAClC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMiC,SAAS,GAAG,MAAMnC,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIF,KAAK,CAACgC,SAAS,CAAC3B,OAAO,IAAI,+BAA+B,CAAC;IACvE;IAEA,MAAMJ,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCP,QAAQ,CAAC;MAAEC,IAAI,EAAE,6BAA6B;MAAEO,OAAO,EAAEF;IAAK,CAAC,CAAC;IAChE,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdT,QAAQ,CAAC;MAAEC,IAAI,EAAE,6BAA6B;MAAEO,OAAO,EAAEC,KAAK,CAACC;IAAQ,CAAC,CAAC;IACzE,MAAMD,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}