{"ast":null,"code":"export const fetchMenu = () => async dispatch => {\n  dispatch({\n    type: 'FETCH_MENU_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/menu');\n    const data = await response.json();\n    dispatch({\n      type: 'FETCH_MENU_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_MENU_FAILURE',\n      payload: error.message\n    });\n  }\n};\n\n// Cart Actions\nexport const addToCart = item => ({\n  type: 'ADD_TO_CART',\n  payload: item\n});\nexport const removeFromCart = itemId => ({\n  type: 'REMOVE_FROM_CART',\n  payload: itemId\n});\nexport const updateCartItemQuantity = (itemId, quantity) => ({\n  type: 'UPDATE_CART_ITEM_QUANTITY',\n  payload: {\n    itemId,\n    quantity\n  }\n});\nexport const clearCart = () => ({\n  type: 'CLEAR_CART'\n});\n\n// Order Actions\nexport const placeOrder = orderData => async dispatch => {\n  dispatch({\n    type: 'PLACE_ORDER_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(orderData)\n    });\n    const data = await response.json();\n    dispatch({\n      type: 'PLACE_ORDER_SUCCESS',\n      payload: data\n    });\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n    return data;\n  } catch (error) {\n    dispatch({\n      type: 'PLACE_ORDER_FAILURE',\n      payload: error.message\n    });\n    throw error;\n  }\n};\nexport const fetchOrders = () => async dispatch => {\n  dispatch({\n    type: 'FETCH_ORDERS_REQUEST'\n  });\n  try {\n    const response = await fetch('http://localhost:5000/api/orders');\n    const data = await response.json();\n    dispatch({\n      type: 'FETCH_ORDERS_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_ORDERS_FAILURE',\n      payload: error.message\n    });\n  }\n};\nexport const updateOrderStatus = (orderId, status) => async dispatch => {\n  dispatch({\n    type: 'UPDATE_ORDER_STATUS_REQUEST'\n  });\n  try {\n    const response = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    const data = await response.json();\n    dispatch({\n      type: 'UPDATE_ORDER_STATUS_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'UPDATE_ORDER_STATUS_FAILURE',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["fetchMenu","dispatch","type","response","fetch","data","json","payload","error","message","addToCart","item","removeFromCart","itemId","updateCartItemQuantity","quantity","clearCart","placeOrder","orderData","method","headers","body","JSON","stringify","fetchOrders","updateOrderStatus","orderId","status"],"sources":["C:/Users/Admin/restaurant-order-system/frontend/src/redux/actions.js"],"sourcesContent":["export const fetchMenu = () => async (dispatch) => {\r\n    dispatch({ type: 'FETCH_MENU_REQUEST' });\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/menu');\r\n      const data = await response.json();\r\n      dispatch({ type: 'FETCH_MENU_SUCCESS', payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: 'FETCH_MENU_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n  \r\n  // Cart Actions\r\n  export const addToCart = (item) => ({\r\n    type: 'ADD_TO_CART',\r\n    payload: item\r\n  });\r\n  \r\n  export const removeFromCart = (itemId) => ({\r\n    type: 'REMOVE_FROM_CART',\r\n    payload: itemId\r\n  });\r\n  \r\n  export const updateCartItemQuantity = (itemId, quantity) => ({\r\n    type: 'UPDATE_CART_ITEM_QUANTITY',\r\n    payload: { itemId, quantity }\r\n  });\r\n  \r\n  export const clearCart = () => ({\r\n    type: 'CLEAR_CART'\r\n  });\r\n  \r\n  // Order Actions\r\n  export const placeOrder = (orderData) => async (dispatch) => {\r\n    dispatch({ type: 'PLACE_ORDER_REQUEST' });\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/orders', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(orderData),\r\n      });\r\n      const data = await response.json();\r\n      dispatch({ type: 'PLACE_ORDER_SUCCESS', payload: data });\r\n      dispatch({ type: 'CLEAR_CART' });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: 'PLACE_ORDER_FAILURE', payload: error.message });\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n  export const fetchOrders = () => async (dispatch) => {\r\n    dispatch({ type: 'FETCH_ORDERS_REQUEST' });\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/orders');\r\n      const data = await response.json();\r\n      dispatch({ type: 'FETCH_ORDERS_SUCCESS', payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: 'FETCH_ORDERS_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n  \r\n  export const updateOrderStatus = (orderId, status) => async (dispatch) => {\r\n    dispatch({ type: 'UPDATE_ORDER_STATUS_REQUEST' });\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/orders/${orderId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ status }),\r\n      });\r\n      const data = await response.json();\r\n      dispatch({ type: 'UPDATE_ORDER_STATUS_SUCCESS', payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: 'UPDATE_ORDER_STATUS_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}